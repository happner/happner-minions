#!/usr/bin/env node

var opts = JSON.parse(process.argv[2]);

var name = opts.config.name;
var marshal = opts.marshal;
var config = opts.config.config;
var script = opts.config.script;
var externalInterfaces = require('../lib/util').externalInterfaces;
var errorize = require('errorize');
var os = require('os');
var util = require('util');

process.title = util.format('node minion mesh %s %s', script, name);

delete require.cache[(opts.config.home || '..') + '/configs/' + config + '_mesh'];
delete require.cache[(opts.config.home || '..') + '/scripts/' + script + '_mesh'];
var Config = require((opts.config.home || '..') + '/configs/' + config + '_mesh');
var Script = require((opts.config.home || '..') + '/scripts/' + script + '_mesh');

var Happner = require('happner');

var error = function(e) {
  e = errorize(e);
  if (report && report.exchange) {
    return report.exchange['happner-minions'].minionError(name, errorize.encode(e, 3))
    .then(function() {
      process.exit(1);
    })
    .catch(function() {
      console.error(e);
      process.exit(1);
    });
  }
  process.exit(1);
}

// Reports back to marshal.
var report = new Happner.MeshClient({
  host: marshal.datalayer.address.address,
  port: marshal.datalayer.address.port,
});

var mesh;

report.login()

.then(function() {
  return Happner.create(Config.createConfig(opts))
})

.then(function(result) {
  mesh = result;
  return report.event['happner-minions'].onAsync('minion/start/' + name,
    function(data, meta) {
      var Report = {
        start: function() {
          return report.exchange['happner-minions'].minionStarted(name, {startedAt: Date.now()});
        },
        stepDone: function(step, result) {
          result.doneAt = Date.now();
          return report.exchange['happner-minions'].minionStepDone(name, step, result);
        },
        done: function(result) {
          result.doneAt = Date.now();
          return report.exchange['happner-minions'].minionDone(name, result);
        },
        error: function(e) {
          e.errorAt = Date.now();
          return report.exchange['happner-minions'].minionError(name, errorize.encode(e, 3));
        }
      }
      try {
        return Script.run(opts, Report, mesh);
      } catch (e) {
        report.exchange['happner-minions'].minionError(name, errorize.encode(e, 3));
      }
    }
  ).then(function() {
    return report.event['happner-minions'].onAsync('minion/reset/' + name,
      function(resetOpts, meta) {
        var Report = {
          resetDone: function(result) {
            result.resetDoneAt = Date.now();
            return report.exchange['happner-minions'].minionResetDone(name, result);
          },
          error: function(e) {
            e.errorAt = Date.now();
            return report.exchange['happner-minions'].minionError(name, errorize.encode(e, 3));
          }
        }
        try {
          return Script.reset(resetOpts, Report, mesh);
        } catch (e) {
          report.exchange['happner-minions'].minionError(name, errorize.encode(e, 3));
        }
      }
    );
  });
})

.then(function() {
  var meshName = mesh._mesh.config.name;
  var address = mesh._mesh.datalayer.server.server.address();

  if (address.address == '0.0.0.0') {
    // assume first iface
    var ifaces = externalInterfaces();
    address.address = ifaces[0];
  }

  process.title = util.format('node minion mesh %s %s %s:%s', script, name, address.address, address.port);

  return report.exchange['happner-minions'].minionReady({
    name: name,
    meshName: meshName,
    address: address,
    timestamp: Date.now(),
    task: {
      title: Script.title,
      stepsRemaining: Script.steps,
      stepsDone: {}
    }
  });
})

.catch(error);
